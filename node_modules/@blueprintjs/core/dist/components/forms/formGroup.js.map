{"version":3,"sources":["../src/components/forms/formGroup.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAC/B,8CAAgD;AAsChD,IAAa,SAAS;IAAS,qCAAoC;IAAnE;;IAkDA,CAAC;IAzCU,0BAAM,GAAb;QACU,IAAA,eAA0C,EAAxC,sBAAQ,EAAE,gBAAK,EAAE,sBAAQ,CAAgB;QACjD,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE;YAC/B,+BAAO,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ;gBAC7C,KAAK;gBACL,IAAI,CAAC,wBAAwB,EAAE,CAC5B;YACR,6BAAK,SAAS,EAAE,OAAO,CAAC,YAAY;gBAC/B,QAAQ;gBACR,IAAI,CAAC,qBAAqB,EAAE,CAC3B,CACJ,CACT,CAAC;IACN,CAAC;IAEO,gCAAY,GAApB;QACU,IAAA,eAAoD,EAAlD,wBAAS,EAAE,sBAAQ,EAAE,kBAAM,EAAE,kBAAM,CAAgB;QAC3D,MAAM,CAAC,UAAU,CACb,OAAO,CAAC,UAAU,EAClB,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC;YAEvB,GAAC,OAAO,CAAC,QAAQ,IAAG,QAAQ;YAC5B,GAAC,OAAO,CAAC,MAAM,IAAG,MAAM;iBAE5B,SAAS,CACZ,CAAC;;IACN,CAAC;IAEO,4CAAwB,GAAhC;QACY,IAAA,wCAAa,CAAgB;QACrC,MAAM,CAAC,aAAa,KAAK,IAAI,GAAG,WAAS,CAAC,wBAAwB,GAAG,aAAa,CAAC;IACvF,CAAC;IAEO,yCAAqB,GAA7B;QACY,IAAA,kCAAU,CAAgB;QAClC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,6BAAK,SAAS,EAAE,OAAO,CAAC,gBAAgB,IAAG,UAAU,CAAO,CAAC;IACxE,CAAC;IACL,gBAAC;AAAD,CAlDA,AAkDC,CAlD8B,KAAK,CAAC,SAAS,GAkD7C;AAjDG;;;;;GAKG;AACW,kCAAwB,GAAG,8BAAM,SAAS,EAAE,OAAO,CAAC,UAAU,iBAAmB,CAAC;AAPvF,SAAS;IADrB,UAAU;GACE,SAAS,CAkDrB;AAlDY,8BAAS","file":"formGroup.js","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { IIntentProps, IProps } from \"../../common/props\";\n\nexport interface IFormGroupProps extends IIntentProps, IProps {\n    /**\n     * Whether form group should appear as non-interactive.\n     * Remember that `input` elements must be disabled separately.\n     */\n    disabled?: boolean;\n\n    /** Optional helper text. The given content will be wrapped in `.pt-form-helper-text` and displayed beneath `children`. */\n    helperText?: React.ReactNode;\n\n    /** Whether to render the label and children on a single line. */\n    inline?: boolean;\n\n    /** Label of this form group. */\n    label?: React.ReactNode;\n\n    /**\n     * `id` attribute of the labelable form element that this `FormGroup` controls,\n     * used as `<label for>` attribute.\n     */\n    labelFor?: string;\n\n    /**\n     * Whether this form input should appear as required (does not affect HTML form required status).\n     * Providing a boolean `true` value will render a default \"required\" message after the `label` prop.\n     * Providing a JSX value will render that content instead.\n     *\n     * _Note:_ the default message element is exposed as `FormGroup.DEFAULT_REQUIRED_CONTENT` and\n     * can be changed to provide a new global default for your app.\n     * @default false\n     */\n    requiredLabel?: boolean | React.ReactNode;\n}\n\n@PureRender\nexport class FormGroup extends React.Component<IFormGroupProps, {}> {\n    /**\n     * Element used to render `required` message when a boolean value is provided for that prop.\n     * Modifying the value of this property will change the default globally in your app.\n     *\n     * Defaults to `<span class=\"pt-text-muted\">(required)</span>`.\n     */\n    public static DEFAULT_REQUIRED_CONTENT = <span className={Classes.TEXT_MUTED}>(required)</span>;\n\n    public render() {\n        const { children, label, labelFor } = this.props;\n        return (\n            <div className={this.getClassName()}>\n                <label className={Classes.LABEL} htmlFor={labelFor}>\n                    {label}\n                    {this.maybeRenderRequiredLabel()}\n                </label>\n                <div className={Classes.FORM_CONTENT}>\n                    {children}\n                    {this.maybeRenderHelperText()}\n                </div>\n            </div>\n        );\n    }\n\n    private getClassName() {\n        const { className, disabled, inline, intent } = this.props;\n        return classNames(\n            Classes.FORM_GROUP,\n            Classes.intentClass(intent),\n            {\n                [Classes.DISABLED]: disabled,\n                [Classes.INLINE]: inline,\n            },\n            className,\n        );\n    }\n\n    private maybeRenderRequiredLabel() {\n        const { requiredLabel } = this.props;\n        return requiredLabel === true ? FormGroup.DEFAULT_REQUIRED_CONTENT : requiredLabel;\n    }\n\n    private maybeRenderHelperText() {\n        const { helperText } = this.props;\n        if (!helperText) {\n            return null;\n        }\n        return <div className={Classes.FORM_HELPER_TEXT}>{helperText}</div>;\n    }\n}\n"]}